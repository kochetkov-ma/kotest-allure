plugins {
    id 'idea'
    id 'signing'
    id 'maven'

    id 'org.jetbrains.kotlin.jvm' version "$kotlinVersion"
    id 'io.qameta.allure' version "$allurePluginVersion"
    id 'io.codearte.nexus-staging' version "$nexusStagingPluginVersion"
    id 'com.github.ben-manes.versions' version "$benManesPluginVersion"
}
apply from: "$rootDir/gradle/publishing.gradle"
group 'ru.iopump.kotest'
idea { module { downloadJavadoc = true; downloadSources = true } }
compileKotlin {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
    kotlinOptions.jvmTarget = JavaVersion.VERSION_11
}
wrapper {
    distributionType = Wrapper.DistributionType.ALL
    gradleVersion = "$gradleWrapperVersion"
    doLast { delete "$projectDir/gradlew.bat", "$projectDir/gradlew" }
}
repositories { mavenLocal(); mavenCentral() }
dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    implementation "org.jetbrains.kotlin:kotlin-reflect"
    implementation "io.kotest:kotest-core-jvm:$kotestVersion"
    implementation "io.kotest:kotest-common-jvm:$kotestVersion"
    implementation "io.qameta.allure:allure-java-commons:$allureVersion"

    testImplementation "org.slf4j:slf4j-simple:$slf4jVersion"
    testImplementation "io.kotest:kotest-runner-console-jvm:$kotestVersion"
    testImplementation("io.kotest:kotest-runner-junit5-jvm:$kotestVersion") {
        exclude group: 'org.jetbrains.kotlin'
        exclude group: 'io.mockk'
    }
}
test {
    systemProperty "allure.results.directory", file("$buildDir/allure-results")
    useJUnitPlatform()
}
allure { autoconfigure = false; aspectjweaver = true; version = allureVersion; aspectjVersion = aspectJVersion}